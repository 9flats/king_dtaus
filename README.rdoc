= DTAUS & DTAZV always comes together

DTAUS & DTAZV are formats for German bank transfers and is short for
"Datenträgeraustausch". The format itself totally sucks because it was
established in the last century, to be used on floppy disks. Still almost
all German banks use it (they only seem innovative at robbing), and it is
therefore supported in common banking programs too.

This gem saves you all the trouble when generating DTAUS- or DTAZV-text.

We love building payment applications

== Install

  gem install king_dtaus

== Features

* create DTAUS debit advice (Lastschrift)
* create DTAUS credit advice (Gutschrift)
* create DTAZV debit advice

== TODOs

* Increase Testcoverage

== Resources

* DTAZV-Viewer: http://www.meta-evolutions.de/pages/artikel-20070630-dtazv-datei-betrachter.html
* DTA/DTAZV PHP Pear: http://pear.php.net/package/Payment_DTA
* Ruby Kernel Module: http://www.ruby-doc.org/core/classes/Kernel.html
* Windata ZV-Tools: http://www.windata.de/Site/2Produkte2/ZVTools.aspx
* The Swift Codes: http://www.theswiftcodes.com/
* StarMoney: http://www.starmoney.de/index.php?id=starmoneybusiness_testen

== Examples

Here are some examples how to create a DTA- or DTAZV-File. Also check out the spec/dtazv_test.rb to have a running Example of an Export.

=== DTA

  # create a new dtaus object
  dta = KingDta::Dtaus.new('LK')
  # set sender account
  dta.account = KingDta::Account.new( "bank_account_number", "bank_number", "bank_owner")
  # the following should be done in a loop to add multiple bookings
  # create receiving account
  rec_acnt = KingDta::Account.new( "bank_account_number", "bank_number", "bank_owner" )
  # create booking
  booking = KingDta::Booking.new(rec_acnt, 100.00 )
  # set booking text if you want to
  booking.text = "Thanks for your purchase"
  # add booking
  dta.add( booking )
  # end loop

  # create datausstring and do with it whatever fits your workflow
  my_str = dta.create

=== DTAZV

  @date = Date.today
  @dudes_dtazv_export = KingDta::Dtazv.new(@date)
  @dudes_konto = self.dudes_konto
  @fidel_castros_account = self.fidel_castros_account
  @dudes_dtazv_export.account = KingDta::Account.new(
    @dudes_konto.account_number,
    @dudes_konto.bank_number,
    @dudes_konto.client_name,
    @dudes_konto.client_number,
    @dudes_konto.account_street,
    @dudes_konto.account_city,
    @dudes_konto.account_zip_code,
    @dudes_konto.bank_name,
    @dudes_konto.client_street,
    @dudes_konto.client_city,
    @dudes_konto.client_zip_code,
    @dudes_konto.bank_country_code,
    @dudes_konto.client_country_code
  )

  @fidel_castros_booking = KingDta::Booking.new(KingDta::Account.new(
    @fidel_castros_account.account_number,
    @fidel_castros_account.bank_number,
    @fidel_castros_account.client_name,
    @fidel_castros_account.bank_name,
    @fidel_castros_account.account_street,
    @fidel_castros_account.account_city,
    @fidel_castros_account.account_zip_code,
    @fidel_castros_account.bank_name,
    @fidel_castros_account.client_street,
    @fidel_castros_account.client_city,
    @fidel_castros_account.client_zip_code,
    @fidel_castros_account.bank_country_code,
    @fidel_castros_account.client_country_code
  ), 220.25)

  @dudes_dtazv_export.add(@fidel_castros_booking)
  @dudes_dtazv_export.create_file

  # Output is DTAZV0.TXT

also make sure to read the specs

== Credits

Bugfixes and enhancements by

* Georg Ledermann - https://github.com/ledermann
* Kim Rudolph - https://github.com/krudolph
* Thorsten Böttger - https://github.com/alto
* Jan Kus - https://github.com/koos

This gem used https://rubygems.org/gems/DTAUS as a starting point.
It was disected, turned into a real class structure, bugs where fixed and
of course a full test suite ensures its functionality.

Copyright (c) 2009-2011 Georg Leciejewski (SalesKing), Jan Kus (Railslove), released under the MIT license